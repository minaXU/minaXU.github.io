const e=JSON.parse(`{"key":"v-5f5ec316","path":"/posts/%E5%89%8D%E7%AB%AF/pnpm/","title":"pnpm介绍","lang":"zh-CN","frontmatter":{"date":"2023-07-31T00:00:00.000Z","title":"pnpm介绍","category":["前端"],"tag":["前段架构"],"description":"现在越来越多的框架开始使用pnpm作为首选的支持，放到了比npm、yarn更优先的位置，那么来看下pnpm解决了什么问题 pnpm的优势 节省磁盘空间：pnpm使用硬链接的方式共享已安装的包，所有的包都保存在公共的store种，不会出现一个很简单的项目 node_modules 拉了2个G的情况 更快的安装速度：使用过的包就不会重新下载；依赖解析、目录结构计算、链接依赖的过程并发进行，速度更快 防止越权访问：使用 npm 或 Yarn Classic 安装依赖项时，所有的包都被提升到模块目录的根目录。 这样就导致了一个问题，源码可以直接访问和修改依赖，而不是作为只读的项目依赖；pnpm 使用符号链接将项目的直接依赖项添加到模块目录的根目录中","head":[["meta",{"property":"og:url","content":"https://minaxu.github.io/posts/%E5%89%8D%E7%AB%AF/pnpm/"}],["meta",{"property":"og:site_name","content":"minaXU 的博客"}],["meta",{"property":"og:title","content":"pnpm介绍"}],["meta",{"property":"og:description","content":"现在越来越多的框架开始使用pnpm作为首选的支持，放到了比npm、yarn更优先的位置，那么来看下pnpm解决了什么问题 pnpm的优势 节省磁盘空间：pnpm使用硬链接的方式共享已安装的包，所有的包都保存在公共的store种，不会出现一个很简单的项目 node_modules 拉了2个G的情况 更快的安装速度：使用过的包就不会重新下载；依赖解析、目录结构计算、链接依赖的过程并发进行，速度更快 防止越权访问：使用 npm 或 Yarn Classic 安装依赖项时，所有的包都被提升到模块目录的根目录。 这样就导致了一个问题，源码可以直接访问和修改依赖，而不是作为只读的项目依赖；pnpm 使用符号链接将项目的直接依赖项添加到模块目录的根目录中"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://minaxu.github.io/"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-08-01T07:08:51.000Z"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:alt","content":"pnpm介绍"}],["meta",{"property":"article:author","content":"minaXU"}],["meta",{"property":"article:tag","content":"前段架构"}],["meta",{"property":"article:published_time","content":"2023-07-31T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-08-01T07:08:51.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"pnpm介绍\\",\\"image\\":[\\"https://minaxu.github.io/\\"],\\"datePublished\\":\\"2023-07-31T00:00:00.000Z\\",\\"dateModified\\":\\"2023-08-01T07:08:51.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"minaXU\\"}]}"]]},"headers":[{"level":2,"title":"pnpm的优势","slug":"pnpm的优势","link":"#pnpm的优势","children":[]},{"level":2,"title":"包管理工具发展史","slug":"包管理工具发展史","link":"#包管理工具发展史","children":[{"level":3,"title":"npm v1/v2 依赖嵌套","slug":"npm-v1-v2-依赖嵌套","link":"#npm-v1-v2-依赖嵌套","children":[]},{"level":3,"title":"npm v3 扁平化","slug":"npm-v3-扁平化","link":"#npm-v3-扁平化","children":[]},{"level":3,"title":"npm v5 扁平化+lock","slug":"npm-v5-扁平化-lock","link":"#npm-v5-扁平化-lock","children":[]},{"level":3,"title":"Yarn v2 Plug'n'Play","slug":"yarn-v2-plug-n-play","link":"#yarn-v2-plug-n-play","children":[]},{"level":3,"title":"pnpm的解决方案","slug":"pnpm的解决方案","link":"#pnpm的解决方案","children":[]}]},{"level":2,"title":"pnpm使用中的问题","slug":"pnpm使用中的问题","link":"#pnpm使用中的问题","children":[]},{"level":2,"title":"pnpm基本使用","slug":"pnpm基本使用","link":"#pnpm基本使用","children":[]},{"level":2,"title":"其他可能得高级用法","slug":"其他可能得高级用法","link":"#其他可能得高级用法","children":[]}],"git":{"createdTime":1690802889000,"updatedTime":1690873731000,"contributors":[{"name":"xutan","email":"xutan@hd123.com","commits":2}]},"readingTime":{"minutes":10.22,"words":3065},"filePathRelative":"posts/前端/pnpm/index.md","localizedDate":"2023年7月31日","excerpt":"<p>现在越来越多的框架开始使用pnpm作为首选的支持，放到了比npm、yarn更优先的位置，那么来看下pnpm解决了什么问题</p>\\n<h2> pnpm的优势</h2>\\n<ol>\\n<li><strong>节省磁盘空间</strong>：pnpm使用硬链接的方式共享已安装的包，所有的包都保存在公共的store种，不会出现一个很简单的项目 node_modules 拉了2个G的情况</li>\\n<li><strong>更快的安装速度</strong>：使用过的包就不会重新下载；依赖解析、目录结构计算、链接依赖的过程并发进行，速度更快</li>\\n<li><strong>防止越权访问</strong>：使用 npm 或 Yarn Classic 安装依赖项时，所有的包都被提升到模块目录的根目录。 这样就导致了一个问题，源码可以直接访问和修改依赖，而不是作为只读的项目依赖；pnpm 使用符号链接将项目的直接依赖项添加到模块目录的根目录中</li>\\n</ol>","autoDesc":true}`);export{e as data};
